import sqlite3
from config_reader import config
from src.getchatu import get_chat_members, pyroadd
from aiogram import Router, F
from aiogram.filters import ChatMemberUpdatedFilter, Command, JOIN_TRANSITION, IS_MEMBER, IS_NOT_MEMBER, IS_ADMIN
from aiogram.types import ChatMemberUpdated
from aiogram.methods import GetChatMember, GetChat, GetChatMemberCount
from main import bot
from src.initdb import check_chat

router = Router()  # [1]

ADMIN_ID = config.admin_id.get_secret_value()

# –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —á–∞—Ç–∞
IS_PRIVATE = F.chat.type == "private"
NOT_PRIVATE = F.chat.type != "private"

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–¥
bd = config.database_name.get_secret_value()


# –ü—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∞ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
@router.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION), NOT_PRIVATE)
async def botadd(member: ChatMemberUpdated):
    add_user = member.from_id
    chatid = member.chat.id
    admin = await bot(GetChatMember(chat_id=member.chat.id, user_id=member.new_chat_member.user.id))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —á–∞—Ç–æ–≤
    conn = sqlite3.connect(bd)
    cur = conn.cursor()
    if check_chat(chatid) is None:
        cur.execute(f"INSERT INTO chat VALUES ({chatid}, {add_user});")
        conn.commit()
    else:
        cur.execute(f"UPDATE chat SET invited_user_id={add_user} WHERE chat_id = {chatid};")
        conn.commit()
    conn.close()
    if admin.status == "administrator":
        await botadmin(member)
    else:
        await member.answer("–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–¥–º–∏–Ω–∫–∞\n–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –µ—ë –≤—ã–¥–∞—Ç—å? ü•∫")


# –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–∏ –∞–¥–º–∏–Ω–∫—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
@router.my_chat_member(ChatMemberUpdatedFilter(IS_ADMIN), NOT_PRIVATE)
async def botadmin(member: ChatMemberUpdated):
    await member.answer("–î–∞–π—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ")
    chatid = member.chat.id
    # –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Ç–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    await pyroadd(chatid)
    await member.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —á–∞—Ç–∞, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –∏–∑ –±–¥ (–º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –Ω–∞ –≤—ã—Ö–æ–¥ –±–æ—Ç–∞, —Ç–∞–∫ —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º)
@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER), NOT_PRIVATE)
async def delmem(member: ChatMemberUpdated):
    chatid = member.chat.id
    user = member.new_chat_member.user
    if user.is_bot is False:
        conn = sqlite3.connect(bd)
        cur = conn.cursor()
        cur.execute(f"DELETE FROM chat_user WHERE chat_id = {chatid} AND user_id = {user.id};")
        conn.commit()
        conn.close()


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É, —Ç–æ –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–∫–∏–¥—ã–≤–∞–µ—Ç –≤ –±–¥
@router.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION), NOT_PRIVATE)
async def addmem(member: ChatMemberUpdated):
    chatid = member.chat.id
    user = member.new_chat_member.user
    if user.is_bot is False:
        conn = sqlite3.connect(bd)
        cur = conn.cursor()
        cur.execute(f"SELECT user_id, chat_id FROM user WHERE user_id = {user.id} AND chat_id = {chatid};")
        result = cur.fetchone()
        if (user.is_bot is False) and (result is None):
            cur.execute(f"INSERT INTO chat_user VALUES ({user.id}, {chatid});")
            conn.commit()
        conn.close()